{"version":3,"sources":["features/DisplayFilters/DisplayFiltersSlice.ts","features/FavouriteEpisodes/favouriteEpisodesSlice.ts","api/tvmazeAPI.ts","features/EpisodesList/episodesSlice.ts","components/Header.tsx","app/selectors.ts","components/Heart.tsx","components/Screenshot.tsx","features/EpisodesList/EpisodesList.tsx","features/EpisodesList/episodesListPage.tsx","features/DisplayFilters/DisplayFilters.tsx","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/store.ts","tools/localStorage.ts","index.tsx"],"names":["displayFilters","createSlice","name","initialState","showFavs","showUnfavs","reducers","toggleShowFavs","state","_action","toggleShowUnfavs","actions","favouriteEpisodes","toggleFav","action","xor","payload","sort","api","ky","create","prefixUrl","getEpisodes","a","get","json","episodes","episodesById","isLoading","error","getEpisodesStart","getEpisodesSuccess","forEach","episode","image","original","replace","medium","id","getEpisodesFailure","fetchEpisodes","dispatch","toString","styles","header","Header","className","displayFiltersSelector","episodesLoadingSelector","favouritesSelector","displayableEpisodesSelector","createSelector","Object","keys","map","parseInt","episodesIds","favouritesIds","isEmpty","favouriteId","difference","st","heart","solid","aria-label","fill","viewBox","clipRule","d","fillRule","screenshot","props","src","alt","card","innerCard","episodeList","meta","title","episodeNumber","like","noEpisodes","EpisodeList","items","length","e","key","Screenshot","season","number","onClick","onFav","Heart","isFav","EpisodesListPage","useDispatch","visibleEpisodes","useSelector","favouriteEpisodesIds","EpisodesList","episodeId","includes","filterButton","active","DisplayFilters","_e","App","useEffect","Boolean","window","location","hostname","match","rootReducer","combineReducers","displayFiltersReducer","episodesReducer","favouriteEpisodesReducer","store","configureStore","reducer","preloadedState","localStorage","getItem","JSON","parse","undefined","console","loadFromLocalStorage","subscribe","throttle","setItem","stringify","saveToLocalStorage","getState","require","default","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6630366e.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\n// Types\nexport type TDisplayFiltersState = {\n  showFavs: boolean\n  showUnfavs: boolean\n}\n\n// Reducer\nconst initialState = {\n  showFavs: true,\n  showUnfavs: true\n}\n\nconst displayFilters = createSlice({\n  name: 'displayFilters',\n  initialState,\n  reducers: {\n    toggleShowFavs: showFavsToggled,\n    toggleShowUnfavs: showUnfavsToggled\n  }\n})\n\n// Action Handlers\nfunction showFavsToggled (state: TDisplayFiltersState, _action: PayloadAction) {\n  state.showFavs = !state.showFavs\n}\n\nfunction showUnfavsToggled (\n  state: TDisplayFiltersState,\n  _action: PayloadAction\n) {\n  state.showUnfavs = !state.showUnfavs\n}\n\nexport const { toggleShowFavs, toggleShowUnfavs } = displayFilters.actions\n\nexport default displayFilters.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { xor } from 'lodash'\n\n// Types\ntype TFavouriteEpisodesState = {\n  favouriteEpisodes: number[]\n}\n\nconst initialState: TFavouriteEpisodesState = {\n  favouriteEpisodes: []\n}\n\n// Reducer\nconst favouriteEpisodes = createSlice({\n  name: 'favouriteEpisodes',\n  initialState,\n  reducers: {\n    toggleFav: favToggled\n  }\n})\n\n\n// Action Handlers\nfunction favToggled(\n  state: TFavouriteEpisodesState,\n  action: PayloadAction<number>\n) {\n  state.favouriteEpisodes = xor(state.favouriteEpisodes, [action.payload])\n  // Sorting every time is not ideal from a performance standpoint\n  // but this array is not going to get very big anyways\n  state.favouriteEpisodes.sort()\n}\n\nexport const { toggleFav } = favouriteEpisodes.actions\n\nexport default favouriteEpisodes.reducer\n","import ky from 'ky'\n\nconst api = ky.create({\n  prefixUrl: 'https://api.tvmaze.com/shows/538'\n})\n\ntype EpisodeImage = {\n  medium: string\n  original: string\n}\n\ntype EpisodeSelfLink = {\n  href: string\n}\n\ntype EpisodeLink = {\n  self: EpisodeSelfLink\n}\n\nexport type TEpisode = {\n  id: number\n  url: string\n  name: string\n  season: number\n  number: number\n  airdate: string\n  airtime: string\n  airstamp: string\n  runtime: number\n  image: EpisodeImage\n  summary: string\n  _links: EpisodeLink\n}\n\nexport type TEpisodesResult = TEpisode[]\n\nexport async function getEpisodes(): Promise<TEpisode[]> {\n  return api.get('episodes').json()\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { TEpisode, TEpisodesResult, getEpisodes } from '../../api/tvmazeAPI'\nimport { AppThunk } from '../../app/store'\n\n// Types\ntype TEpisodesState = {\n  episodesById: Record<string, TEpisode>\n  isLoading: boolean\n  error: string | null\n}\n\n// Reducer\nconst initialState: TEpisodesState = {\n  episodesById: {},\n  isLoading: false,\n  error: null\n}\n\nconst episodes = createSlice({\n  name: 'episodes',\n  initialState,\n  reducers: {\n    getEpisodesStart: loadingStarted,\n    getEpisodesSuccess: getEpisodesSuccessHandler,\n    getEpisodesFailure: loadingFailed\n  }\n})\n\n// Action Handlers\nfunction loadingStarted(state: TEpisodesState) {\n  state.isLoading = true\n}\n\nfunction loadingFailed(state: TEpisodesState, action: PayloadAction<string>) {\n  state.isLoading = false\n  state.error = action.payload\n}\n\nfunction getEpisodesSuccessHandler(\n  state: TEpisodesState,\n  { payload }: PayloadAction<TEpisodesResult>\n) {\n  state.isLoading = false\n  state.error = null\n  payload.forEach(episode => {\n    episode.image.original = episode.image.original.replace(/http:/, '')\n    episode.image.medium = episode.image.medium.replace(/http:/, '')\n    state.episodesById[episode.id] = episode\n  })\n}\n\n// Thunks\nexport const fetchEpisodes = (): AppThunk => async dispatch => {\n  try {\n    dispatch(getEpisodesStart())\n    const episodes = await getEpisodes()\n    dispatch(getEpisodesSuccess(episodes))\n  } catch (err) {\n    dispatch(getEpisodesFailure(err.toString()))\n  }\n}\n\nexport const {\n  getEpisodesStart,\n  getEpisodesSuccess,\n  getEpisodesFailure\n} = episodes.actions\n\nexport default episodes.reducer\n\n","import React from 'react'\n\nconst Header = () => {\n  return (\n    <header className={styles.header}>\n      <h1 className=\"lh-solid mv0 tracked-tight bold dark-gray\">Favourama</h1>\n      <p className=\"mv1 silver\">Favourite futurama episodes</p>\n    </header>\n  )\n}\n\nconst styles = {\n  header: `\n    pt3\n    ph4\n    pb1\n    mb1\n    sans-serif\n    br4\n    br--bottom\n  `\n}\n\nexport default Header\n","import { isEmpty, difference } from 'lodash/fp'\nimport { createSelector } from 'reselect'\n\nimport { TRootState } from './rootReducer'\nimport { TEpisode } from '../api/tvmazeAPI'\nimport { TDisplayFiltersState } from '../features/DisplayFilters/DisplayFiltersSlice'\n\n// Simple selectors\nexport const displayFiltersSelector = (state: TRootState) =>\n  state.displayFilters\n\nexport const episodesSelector = (state: TRootState) =>\n  state.episodes.episodesById\n\nexport const episodesLoadingSelector = (state: TRootState) =>\n  state.episodes.isLoading\n\nexport const episodesIdsSelector = (state: TRootState) =>\n  Object.keys(state.episodes.episodesById).map(id => parseInt(id, 10))\n\nexport const favouritesSelector = (state: TRootState) => {\n  return state.favouriteEpisodes.favouriteEpisodes\n}\n\n// Multi-slice selectors\nexport const displayableEpisodesSelector = createSelector(\n  [\n    episodesSelector,\n    episodesIdsSelector,\n    favouritesSelector,\n    displayFiltersSelector\n  ],\n\n  (\n    episodes: Record<number, TEpisode>,\n    episodesIds: number[],\n    favouritesIds: number[],\n    { showFavs, showUnfavs }: TDisplayFiltersState\n  ) => {\n    if (isEmpty(episodesIds)) {\n      return []\n    }\n    if (!showUnfavs && !showFavs) {\n      return []\n    }\n    if (!showUnfavs && showFavs) {\n      return favouritesIds.map(favouriteId => episodes[favouriteId])\n    }\n    if (showUnfavs && !showFavs) {\n      return difference(episodesIds, favouritesIds).map(id => episodes[id])\n    }\n    return episodesIds.map(id => episodes[id])\n  }\n)\n","import React from 'react'\n\nconst full = () => {\n  return (\n    <svg aria-label=\"Unlike\" className={st.heart} fill=\"#ed4956\" viewBox=\"0 0 48 48\">\n      <path\n        clipRule=\"evenodd\"\n        d=\"M35.3 35.6c-9.2 8.2-9.8 8.9-11.3 8.9s-2.1-.7-11.3-8.9C6.5 30.1.5 25.6.5 17.8.5 9.9 6.4 3.5 13.7 3.5 20.8 3.5 24 8.8 24 8.8s3.2-5.3 10.3-5.3c7.3 0 13.2 6.4 13.2 14.3 0 7.8-6.1 12.3-12.2 17.8z\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  )\n}\n\nconst empty = () => {\n  return (\n    <svg aria-label=\"Like\" className={st.heart} viewBox=\"0 0 48 48\" fill=\"gray\">\n      <path\n        clipRule=\"evenodd\"\n        d=\"M34.3 3.5C27.2 3.5 24 8.8 24 8.8s-3.2-5.3-10.3-5.3C6.4 3.5.5 9.9.5 17.8s6.1 12.4 12.2 17.8c9.2 8.2 9.8 8.9 11.3 8.9s2.1-.7 11.3-8.9c6.2-5.5 12.2-10 12.2-17.8 0-7.9-5.9-14.3-13.2-14.3zm-1 29.8c-5.4 4.8-8.3 7.5-9.3 8.1-1-.7-4.6-3.9-9.3-8.1-5.5-4.9-11.2-9-11.2-15.6 0-6.2 4.6-11.3 10.2-11.3 4.1 0 6.3 2 7.9 4.2 3.6 5.1 1.2 5.1 4.8 0 1.6-2.2 3.8-4.2 7.9-4.2 5.6 0 10.2 5.1 10.2 11.3 0 6.7-5.7 10.8-11.2 15.6z\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  )\n}\n\nconst st = {\n  heart: `\n    mh-auto\n    w-80\n    pointer\n    grow\n  `\n}\n\ntype HeartProps = {\n  solid?: boolean\n}\n\nexport default ({solid}: HeartProps) => solid ? full() : empty()\n","import React from 'react'\n\ntype ScreenshotProps = {\n  src: string\n  alt: string\n}\n\nconst screenshot = (props: ScreenshotProps) => (\n  <div className=\"w-100 aspect-ratio aspect-ratio--16x9 bg-light-gray black-50\">\n    <img className=\"aspect-ratio--object\" src={props.src} alt={props.alt} />\n  </div>\n)\n\nexport default screenshot\n","import React from 'react'\n\nimport { TEpisode } from '../../api/tvmazeAPI'\nimport Heart from '../../components/Heart'\nimport Screenshot from '../../components/Screenshot'\n\n// We need to wrap this list inside a fragment until the issue is solved\n// in definitivleyTyped\n// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20356\nconst EpisodeList = (props: EpisodeListProps) => {\n  if (props.items.length > 0) {\n    return (\n      <section className={st.episodeList}>\n        {' '}\n        {props.items.map((e: TEpisode) => {\n          return (\n            <article className={st.card} key={e.id}>\n              <div className={st.innerCard}>\n                <Screenshot src={e.image.original} alt={`Futurama - ${e.name}`} />\n                <div className={st.meta}>\n                  <h1 className={st.title}>{e.name}</h1>\n                  <h2 className={st.episodeNumber}>{`S${e.season}E${\n                    e.number\n                  }`}</h2>\n                </div>\n                <div className={st.like}>\n                  <span\n                    onClick={() => {\n                      props.onFav(e.id)\n                    }}\n                  >\n                    <Heart solid={props.isFav(e.id)} />\n                  </span>\n                </div>\n              </div>\n            </article>\n          )\n        })}\n      </section>\n    )\n  }\n  return (\n    <section className={st.episodeList}>\n      <p className={st.noEpisodes}>No episodes matching your filter(s)</p>\n    </section>\n  )\n}\n\nconst st = {\n  card: `\n    pa1\n    w-100\n    w-50-m\n    w-25-ns\n    mb2\n`,\n  innerCard: `\n    flex\n    flex-wrap\n    pa2\n    ba\n    b--light-gray\n    shadow-hover\n  `,\n  episodeList: `\n    flex\n    flex-wrap\n    w-100\n    pa3\n  `,\n  meta: `\n    mt2\n    w-90\n  `,\n  title: `\n    f4\n    fw4\n    mv1\n  `,\n  episodeNumber: `\n    f5\n    fw4\n    mt0\n  `,\n  like: `\n   w-10 \n   mt3\n   flex\n   items-end\n  `,\n  noEpisodes: `\n    center\n    f3\n    pt6\n    silver\n  `\n}\n\ntype EpisodeListProps = {\n  items: TEpisode[]\n  isFav: Function\n  onFav: Function\n}\n\nexport default EpisodeList\n\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport {\n  episodesLoadingSelector,\n  favouritesSelector,\n  displayableEpisodesSelector\n} from '../../app/selectors'\n\nimport { toggleFav } from '../FavouriteEpisodes/favouriteEpisodesSlice'\n\nimport EpisodesList from './EpisodesList'\n\nconst EpisodesListPage = () => {\n  const dispatch = useDispatch()\n\n  const visibleEpisodes = useSelector(displayableEpisodesSelector)\n  const favouriteEpisodesIds = useSelector(favouritesSelector)\n  const isLoading = useSelector(episodesLoadingSelector)\n\n  const isFav = (id: number) => favouriteEpisodesIds.includes(id)\n\n  const onFav = (episodeId: string) => {\n    dispatch(toggleFav(parseInt(episodeId, 10)))\n  }\n\n  if (isLoading) {\n    return <p>Loading ...</p>\n  }\n  return <EpisodesList items={visibleEpisodes} onFav={onFav} isFav={isFav} />\n}\n\nexport default EpisodesListPage\n","import React, { MouseEvent } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { displayFiltersSelector } from '../../app/selectors'\nimport { toggleShowFavs, toggleShowUnfavs } from './DisplayFiltersSlice'\n\nconst DisplayFilters = () => {\n  const dispatch = useDispatch()\n\n  const { showFavs, showUnfavs } = useSelector(displayFiltersSelector)\n\n  const handleFavFilterClicked = (_e: MouseEvent) => dispatch(toggleShowFavs())\n\n  const handleUnfavFilterClicked = (_e: MouseEvent) =>\n    dispatch(toggleShowUnfavs())\n\n  return (\n    <section className=\"tr mt3 ph4\">\n      <span className=\"f6 ttu silver\">show: </span>\n      <button\n        className={styles.filterButton({ active: showFavs })}\n        onClick={handleFavFilterClicked}\n      >\n        favs\n      </button>\n      <button\n        className={styles.filterButton({ active: showUnfavs })}\n        onClick={handleUnfavFilterClicked}\n      >\n        unfavs\n      </button>\n    </section>\n  )\n}\n\ntype filterButtonProps = {\n  active: boolean\n}\n\nconst styles = {\n  filterButton: ({ active }: filterButtonProps) => `\n    f6\n    link\n    dim\n    br2\n    ba\n    ph2\n    pv2\n    mb2\n    ml2\n    dib\n    pointer:hover\n    ${active ? 'white' : 'orange'}\n    ${active ? 'bg-orange' : 'bg-white'}\n  `\n}\n\nexport default DisplayFilters\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport Header from '../components/Header'\nimport EpisodesListPage from '../features/EpisodesList/episodesListPage'\nimport DisplayFilters from '../features/DisplayFilters/DisplayFilters'\n\nimport { fetchEpisodes } from '../features/EpisodesList/episodesSlice'\n\nconst App = () => {\n  const dispatch = useDispatch()\n\n  useEffect(\n    () => {\n      dispatch(fetchEpisodes())\n    },\n    [dispatch]\n  )\n\n  return (\n    <div className=\"sans-serif\">\n      <Header />\n      <DisplayFilters />\n      <EpisodesListPage />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit'\n\nimport episodesReducer from '../features/EpisodesList/episodesSlice'\nimport favouriteEpisodesReducer from '../features/FavouriteEpisodes/favouriteEpisodesSlice'\nimport displayFiltersReducer from '../features/DisplayFilters/DisplayFiltersSlice'\n\nconst rootReducer = combineReducers({\n  displayFilters: displayFiltersReducer,\n  episodes: episodesReducer,\n  favouriteEpisodes: favouriteEpisodesReducer\n})\n\nexport type TRootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\nimport throttle from 'lodash/throttle'\n\nimport rootReducer, { TRootState } from './rootReducer'\nimport { loadFromLocalStorage, saveToLocalStorage } from '../tools/localStorage'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: loadFromLocalStorage()\n\n})\n\nstore.subscribe(\n  throttle(() => {\n    saveToLocalStorage({\n      episodes: store.getState().episodes,\n      favouriteEpisodes: store.getState().favouriteEpisodes\n    })\n  }, 1000)\n)\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type AppThunk = ThunkAction<void, TRootState, unknown, Action<string>>\n\nexport default store\n","const LOCAL_STORAGE_KEY = 'favourama-state'\n\nexport const loadFromLocalStorage = () => {\n  try {\n    const state = window.localStorage.getItem(LOCAL_STORAGE_KEY)\n    return state ? JSON.parse(state) : undefined\n  } catch (error) {\n    console.error(error)\n    return undefined\n  }\n}\n\nexport const saveToLocalStorage = (state: object) => {\n  try {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state))\n  } catch (error) {\n    console.error(error)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\n\nimport store from './app/store'\n\nimport './index.css'\n\nconst render = () => {\n  const App = require('./app/App.tsx').default\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App.tsx', render)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}